generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

enum FermentationType {
  top
  bottom
  wild
  any
}

enum CategorizationType {
  geography
  flavor
  aroma
  ingredient_grouping
}

model BeerStyle {
  id                     Int              @id(map: "pk_beer_styles") @default(autoincrement())
  name                   String
  appearanceDescription  String           @map("appearance_description")
  aromaDescription       String           @map("aroma_description")
  flavorDescription      String           @map("flavor_description")
  mouthfeelDescription   String           @map("mouthfeel_description")
  comments               String
  history                String
  ibuMinimum             Int              @map("ibu_minimum")
  ibuMaximum             Int              @map("ibu_maximum")
  srmMinimum             Int              @map("srm_minimum")
  srmMaximum             Int              @map("srm_maximum")
  originalGravityMinimum Float            @map("original_gravity_minimum") @db.Real
  originalGravityMaximum Float            @map("original_gravity_maximum") @db.Real
  finalGravityMinimum    Float            @map("final_gravity_minimum") @db.Real
  finalGravityMaximum    Float            @map("final_gravity_maximum") @db.Real
  abvMinimum             Float            @map("abv_minimum") @db.Real
  abvMaximum             Float            @map("abv_maximum") @db.Real
  fermentation           FermentationType
  bjcpCode               String           @default("") @map("bjcp_code")
  overallImpression      String           @default("") @map("overall_impression")
  imageUrl               String           @map("image_url")
  sampleRecipeId         Int?             @map("sample_recipe_id")
  sampleRecipe           Recipe?          @relation(fields: [sampleRecipeId], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_beer_styles_recipes_recipe_id")

  @@map("beer_styles")
}

model Grain {
  id                          Int             @id(map: "pk_grains") @default(autoincrement())
  name                        String
  lovibond                    Float           @db.Real
  fineGrindDryBasisPercentage Float           @map("fine_grind_dry_basis_percentage") @db.Real
  suggestedMaximumUsage       Int             @default(0) @map("suggested_maximum_usage")
  maltster                    String          @default("")
  recipeGrains                RecipeGrain[]
  grainCategories             GrainCategory[]

  @@map("grains")
}

model GrainCategory {
  id                 String             @id(map: "pk_grain_categories") @default(uuid())
  categorizationType CategorizationType @map("categorization_type")
  grains             Grain[]

  @@map("grain_categories")
}

model Hop {
  id                      Int           @id(map: "pk_hops") @default(autoincrement())
  name                    String
  forAroma                Boolean       @default(false) @map("for_aroma")
  forBittering            Boolean       @default(false) @map("for_bittering")
  forDryHopping           Boolean       @default(false) @map("for_dry_hopping")
  forFlavor               Boolean       @default(false) @map("for_flavor")
  minimumTypicalAlphaAcid Float         @map("minimum_typical_alpha_acid")
  maximumTypicalAlphaAcid Float         @map("maximum_typical_alpha_acid")
  recipeHops              RecipeHop[]
  hopCategories           HopCategory[]

  @@map("hops")
}

model HopCategory {
  id                 String             @id(map: "pk_hop_categories") @default(uuid())
  categorizationType CategorizationType @map("categorization_type")
  hops               Hop[]

  @@map("hop_categories")
}

model MaltExtract {
  id                       String              @id(map: "pk_malt_extracts") @default(uuid())
  name                     String
  lovibond                 Float               @db.Real
  fermentabilityPercentage Float               @map("fermentability_percentage") @db.Real
  suggestedMaximumUsage    Int                 @default(100) @map("suggested_maximum_usage")
  maltster                 String              @default("")
  recipeMaltExtracts       RecipeMaltExtract[]

  @@map("malt_extracts")
}

model OtherFermentable {
  id                       String                   @id(map: "pk_other_fermentables") @default(uuid())
  name                     String
  lovibond                 Float                    @db.Real
  fermentabilityPercentage Float                    @map("fermentability_percentage") @db.Real
  recipeOtherFermentables  RecipeOtherFermentable[]

  @@map("other_fermentables")
}

model RecipeGrain {
  id             String @id(map: "pk_recipe_grains") @default(uuid())
  recipeId       Int    @map("recipe_id")
  grainId        Int    @map("grain_id")
  weightInPounds Float  @map("weight_in_pounds") @db.Real
  grain          Grain  @relation(fields: [grainId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_recipe_grains_grains_grain_id")
  recipe         Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_recipe_grains_recipes_recipe_id")

  @@index([grainId], map: "ix_recipe_grains_grain_id")
  @@index([recipeId], map: "ix_recipe_grains_recipe_id")
  @@map("recipe_grains")
}

model RecipeHop {
  id               String @id(map: "pk_recipe_hops") @default(uuid())
  recipeId         Int    @map("recipe_id")
  hopId            Int    @map("hop_id")
  alphaAcidPercent Float  @map("alpha_acid_percent") @db.Real
  boilTimeMinutes  Int    @map("boil_time_minutes")
  weightInOunces   Float  @map("weight_in_ounces") @db.Real
  hop              Hop    @relation(fields: [hopId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_recipe_hops_hops_hop_id")
  recipe           Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_recipe_hops_recipes_recipe_id")

  @@index([hopId], map: "ix_recipe_hops_hop_id")
  @@index([recipeId], map: "ix_recipe_hops_recipe_id")
  @@map("recipe_hops")
}

model RecipeMaltExtract {
  id             String      @id(map: "pk_recipe_malt_extracts") @default(uuid())
  recipeId       Int         @map("recipe_id")
  maltExtractId  String      @map("malt_extract_id")
  weightInPounds Float       @map("weight_in_pounds") @db.Real
  maltExtract    MaltExtract @relation(fields: [maltExtractId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_recipe_grains_grains_grain_id")
  recipe         Recipe      @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_recipe_grains_recipes_recipe_id")

  @@index([maltExtractId], map: "ix_recipe_malt_extracts_malt_extract_id")
  @@index([recipeId], map: "ix_recipe_malt_extracts_recipe_id")
  @@map("recipe_malt_extracts")
}

model RecipeOtherFermentable {
  id                 String           @id(map: "pk_recipe_other_fermentables") @default(uuid())
  recipeId           Int              @map("recipe_id")
  otherFermentableId String           @map("other_fermentable_id")
  weightInPounds     Float            @map("weight_in_pounds") @db.Real
  otherFermentable   OtherFermentable @relation(fields: [otherFermentableId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_recipe_grains_grains_grain_id")
  recipe             Recipe           @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_recipe_grains_recipes_recipe_id")

  @@index([otherFermentableId], map: "ix_recipe_other_fermentables_other_fermentable_id")
  @@index([recipeId], map: "ix_recipe_other_fermentables_recipe_id")
  @@map("recipe_other_fermentables")
}

model Recipe {
  id                      Int                      @id(map: "pk_recipes") @default(autoincrement())
  name                    String
  description             String
  postBoilGallons         Int
  recipeGrains            RecipeGrain[]
  recipeHops              RecipeHop[]
  recipeMaltExtracts      RecipeMaltExtract[]
  recipeOtherFermentables RecipeOtherFermentable[]
  yeastId                 Int                      @map("yeast_id")
  yeast                   Yeast                    @relation(fields: [yeastId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_recipes_yeasts_yeast_id")
  BeerStyle               BeerStyle[]

  @@map("recipes")
}

model User {
  id        Int    @id(map: "pk_users") @default(autoincrement())
  firstName String @default("") @map("first_name")
  lastName  String @default("") @map("last_name")
  email     String @default("")
  appleId   String @unique @map("apple_id")

  @@map("users")
}

model WaterProfile {
  id               Int    @id(map: "pk_water_profiles") @default(autoincrement())
  label            String
  minimumCalcium   Int    @map("minimum_calcium")
  maximumCalcium   Int    @map("maximum_calcium")
  minimumMagnesium Int    @map("minimum_magnesium")
  maximumMagnesium Int    @map("maximum_magnesium")
  minimumSodium    Int    @map("minimum_sodium")
  maximumSodium    Int    @map("maximum_sodium")
  minimumCarbonate Int    @map("minimum_carbonate")
  maximumCarbonate Int    @map("maximum_carbonate")
  minimumSulfate   Int    @map("minimum_sulfate")
  maximumSulfate   Int    @map("maximum_sulfate")
  minimumChloride  Int    @map("minimum_chloride")
  maximumChloride  Int    @map("maximum_chloride")

  @@map("water_profiles")
}

model Yeast {
  id                 Int              @id(map: "pk_yeasts") @default(autoincrement())
  name               String
  fermentation       FermentationType
  maximumTemperature Int              @default(0) @map("maximum_temperature")
  minimumTemperature Int              @default(0) @map("minimum_temperature")
  attenuation        Float            @default(0) @db.Real
  Recipe             Recipe[]
  yeastCategories    YeastCategory[]

  @@map("yeasts")
}

model YeastCategory {
  id                 String             @id(map: "pk_yeast_categories") @default(uuid())
  categorizationType CategorizationType @map("categorization_type")
  yeasts             Yeast[]

  @@map("yeast_categories")
}
